######################### PRINT START / END #########################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:		
	# Parameters
	{% set bed = params.BED|int %}
	{% set hotend = params.HOTEND|int %}
	{% set chamber = params.CHAMBER|default(0)|int %}

    # An alternative way to work out chamber temperature from PrusaSlicer, which does not pass CHAMBER
    {% set filament = params.FILAMENT|default("NONE")|string %}   
    { action_respond_info("Filament type - " + filament) }
    {% if filament != 'NONE' %}                                                         
        {% set fct = {'ASA': 50, 'ABS': 50, 'NYLON': 0, 'PLA': 0, 'PC': 50, 'PET': 45 } %}
        {% set chamber = fct[filament] %}
        { action_respond_info("Filament chamber temp - " + chamber|string) }
    {% endif %}

	# Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}	

   	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0  									  ; cancel exhaust off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      								  ; cancel off timer (if there is one)
	SET_PIN PIN=caselight VALUE=0.67													  ; turn on case light
	_RESETSPEEDS																		  ; reset speed, accel etc to configured values
	SET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"                                                ; turn on nozzle LEDs
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                  ; set logo LEDs back to white
    SET_Z_THERMAL_ADJUST ENABLE=1
    M104 S{150}																			  ; set hotend to no-ooze temp allowed for TAP bed probe
	M140 S{bed}																			  ; set bed to target temp
	G28																					  ; home
    CLEANNOZZLE
    G28
    G90																					  ; absolute positioning

    {% if chamber > 35 %}                                                                ; if the chamber desired temp is over baseline (35) then setup exhaust fan to keep it under control
        SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target={chamber+1}           ; plus 1 to temp to offset hysteresis
        SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={chamber}                   ; set the chamber heater to work above 35C target
    {% else %}
        SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target=35
    {% endif %}

	{% if printer["temperature_sensor chamber"].temperature < chamber and chamber > 35 %}				; - if chamber is not at temp yet:
		HEATSOAK T={bed} MOVE=1																			; 	heatsoak macro + park in center
		M190 S{bed} 																					; 	set bed chamber heating temp
        { action_respond_info("Waiting for chamber to reach temperature") }
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber}							; 	wait for chamber final temp
        { action_respond_info("Waiting for bed to reach set temp") }
        M190 S{bed}                                                                                    ; waits for bed to return to desired temp
    {% else %}																							; - if chamber is already at temp:
    	{% if printer.heater_bed.temperature < (bed-2) %}												; -- but bed is not fully heated (within 2C):
    		HEATSOAK T={bed} MOVE=1																		; 		heatsoak and park
    		M190 S{bed} 																				; 		wait for bed final temp
    	{% else %}																						; -- and bed is already heated:
    		HEATSOAK T={bed} MOVE=0																		; 		"heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
    	{% endif %}
	{% endif %}	

    { action_respond_info('Waiting for bed undersurface to reach %.1fC' % (bed*0.80)) }
    TEMPERATURE_WAIT SENSOR="temperature_sensor Bed_Rear_Bottom" MINIMUM={bed*0.80}                   ; wait for the outside of the bed to be within 15% of the center under the heating pad

    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                  ; set logo LEDs back to white
	M106 S0																								; turn off part cooling fan (from heatsoak)
    BED_MESH_CLEAR																						; clear bed mesh
    { action_respond_info("Performing QGL and BedMesh") }
	QUAD_GANTRY_LEVEL																					; quad gantry level
	G28 Z																								; home z
	BED_MESH_CALIBRATE																					; mesh
	G28 Z																								; home z again
   
    G0 X55 Y350 F19500  ; go to purge bucket whilst warming up to temp
    M109 S{hotend} 																						; set & wait for hotend final temp
    #BUCKET_PURGE
    ADAPTIVE_PURGE
  
	G92 E0                              																; reset Extruder
    G1 Z10 F3000                       																; move Z Axis up
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1												; enable filament sensor

    M117  # Blank message - hopefully

[gcode_macro PRINT_END]
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0													; disable filament sensor
	CLEAR_PAUSE																							; clear pause (from M191) if there is one
    SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET=0
    {% if printer.heater_bed.temperature >= 90 %}												
		SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target=50                                   ; initial cool of the chamber		; crank exhaust fan to 100% to evacuate chamber
    	BedFansFast
    {% endif %}													
    SET_Z_THERMAL_ADJUST ENABLE=0
	M400                         	   																	; wait for buffer to clear
	G92 E0                        	    																; zero the extruder
    G1 E-10.0 F3600                                                                                    ; retract filament
	M104 S0						 	    			 													; turn only the hotend off
	M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}												; return the bed to temp, some slicers like to turn it off
    M107                         	   			 	 													; turn off part cooling fan
	G91                             							 										; relative positioning
    G1 Z5 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	PARKREAR                                                                                           ; park high at the back to keep away from hot bed after hotend fan has stopped
    BED_MESH_CLEAR																						; clear bed mesh		
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=120													; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800	 												; turn everything off in 30 min
  	SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target=30                                       ; further cool the chamber
    {% if printer.heater_bed.temperature >= 75 %}												
		SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target=30                                   ; final cool of the chamber	; crank exhaust fan to 100% to evacuate chamber
    	BedFansSlow
    {% endif %}													
    _RESETSPEEDS																						; reset speed, accel etc to configured max values
    SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"                                                                ; turn off nozzle LEDs
	#BEEP I=3																							; beep 3 times

######################## SUPPORT MACROS ##############################

######################### PRESSURE ADVANCE #########################

# This will just set a default value for PA per filament temp. 
# If PS/SS filament gcode sets pressure advance, it will take precendence over this, as it runs after.
# Pretty hacky way to do it, but it works. Better way would probably be to pass filament type as a variable.

[gcode_macro _TEMPADJUSTPA]
gcode:
	# ABS
	{% if printer.heater_bed.target >= 100 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	## PETG
	#{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
	#	SET_PRESSURE_ADVANCE ADVANCE=
	# PLA
	{% elif printer.heater_bed.target <= 65 %}
		SET_PRESSURE_ADVANCE ADVANCE=0.035
	# Catch-all
	{% else %}
		SET_PRESSURE_ADVANCE ADVANCE=0.055
	{% endif %}

[delayed_gcode EXHAUST_OFF]
gcode:
	#SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
	
######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### MISC #########################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}

    SET_LOGO_LEDS_BY_NAME COLOR="ORANGE"       ; set logo to orange
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"       ; set logo to orange

[gcode_macro _RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
	G28
	#ATTACH_PROBE_LOCK
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	G28 Z
	#DOCK_PROBE_UNLOCK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

    SAVE_GCODE_STATE NAME=HEATSOAK
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	#SET_FAN_SPEED FAN=Exhaust SPEED=0		 		; turn off exhaust fan
	SET_PIN PIN=caselight VALUE=0.67					; turn on case light
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S150       ;{(printer["gcode_macro PRINT_START"].hotendtemp|int	* 0.7)}	; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
        SET_LOGO_LEDS_BY_NAME COLOR="ORANGE"       ; set logo to orange
		_CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

    RESTORE_GCODE_STATE NAME=HEATSOAK


######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
######################### ALIASES/SHORTCUTS #########################

[gcode_macro QGL]
gcode:
	_CG28
    BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE
	
# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	#SET_FAN_SPEED FAN=Exhaust SPEED=0  				; turn exhaust fan off
	#SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	#SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
	SET_PIN PIN=caselight VALUE=0					; turn light off
    SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"            ; turn off nozzle LEDs
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"            ; set logo LED back to white
	
######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

# Move toolhead diagnonally to max Z and back. For "settling in" after tinkering with Z

[gcode_macro EXERCISE]
gcode:
	# Parameters
	{% set i = params.I|default(1)|int %}
	
	SAVE_GCODE_STATE NAME=EXERCISE
	_CG28
	G90                               ; absolute positioning
	G0 X175 Y10 Z5 F19500
	{% for wipe in range(i|int) %}
		#Fast up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			;G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F19500
			;M105                     ; keepalive (temp report)
		{% endfor %}
		#Slow up/down diagonal
		{% for coordinate in [(175,350,printer.toolhead.axis_maximum.z-50),(175,10,5)] %}
			G0 X{coordinate[0]} Y{coordinate[1]} Z{coordinate[2]} F900
			M105                     ; keepalive (temp report)
		{% endfor %}
	{% endfor %}
	M106 S0                          ; disable fan
	RESTORE_GCODE_STATE NAME=EXERCISE